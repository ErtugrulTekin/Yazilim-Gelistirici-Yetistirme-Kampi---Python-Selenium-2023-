# Generated by Selenium IDE
import pytest
from time import sleep
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager
from constants import globalConstants
from selenium.webdriver.common.action_chains import ActionChains
from datetime import date
from pathlib import Path

class TestLastproject():
  def setup_method(self, method):
    self.driver = webdriver.Chrome(ChromeDriverManager().install())
    self.driver.get(globalConstants.URL)
    self.driver.maximize_window()
    self.folderPath = str(date.today())
    Path(self.folderPath).mkdir(exist_ok=True)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  def waitForElementVisible(self,locator, timeout=5):
        WebDriverWait(self.driver, timeout).until(ec.visibility_of_element_located(locator))
  
  @pytest.mark.parametrize("username,password,firstname,lastname,postalcode", [("standard_user", "secret_sauce", "Ertugrul", "Tekin", "41")])
  def test_lastproject(self,username,password,firstname,lastname,postalcode):
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"username\"]"))
    usernameInput = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]")
    usernameInput.send_keys(username)
    
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"password\"]"))
    passwordInput = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]")
    passwordInput.send_keys("1")
    loginButton = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    loginButton.click()
    
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"error\"]"))
    errorMessage = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]")
    assert errorMessage.text == globalConstants.errorMessage
    
    self.waitForElementVisible((By.CLASS_NAME, "error-button"))
    errorMessageButton = self.driver.find_element(By.CLASS_NAME, "error-button")
    errorMessageButton.click()
    passwordInput.click()
    passwordInput.clear()
    passwordInput.send_keys(password)
    loginButton.click()
    
    self.driver.save_screenshot(f"{self.folderPath}/sauceDemoPage.png")

    self.waitForElementVisible((By.XPATH, "/html/body/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[1]/a/div"))
    self.waitForElementVisible((By.XPATH, "/html/body/div/div/div/div[2]/div/div/div/div[4]/div[2]/div[1]/a/div"))
    self.waitForElementVisible((By.XPATH, "/html/body/div/div/div/div[2]/div/div/div/div[3]/div[2]/div[1]/a/div"))
    
    product1 = self.driver.find_element(By.ID, "add-to-cart-sauce-labs-backpack")
    product2 = self.driver.find_element(By.ID, "add-to-cart-sauce-labs-fleece-jacket")
    product3 = self.driver.find_element(By.ID, "add-to-cart-sauce-labs-bolt-t-shirt")
    
    actions = ActionChains(self.driver)
    actions.click(product1)
    actions.click(product2)
    actions.click(product3)
    actions.perform()

    basketButton = self.driver.find_element(By.LINK_TEXT, "3")
    basketButton.click()
    
    self.driver.save_screenshot(f"{self.folderPath}/BasketPage.png")

    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"remove-sauce-labs-bolt-t-shirt\"]"))
    removeButton = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"remove-sauce-labs-bolt-t-shirt\"]")
    removeButton.click()
    
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"checkout\"]"))
    checkoutButton = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"checkout\"]")
    checkoutButton.click()    
    
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"firstName\"]"))
    firstNameInput = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"firstName\"]")
    firstNameInput.send_keys(firstname)
        
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"lastName\"]"))
    lastNameInput = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"lastName\"]")
    lastNameInput.send_keys(lastname)
    
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"postalCode\"]"))
    postalCodeInput = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"postalCode\"]")
    postalCodeInput.send_keys(postalcode)
    
    self.driver.save_screenshot(f"{self.folderPath}/CheckoutPage.png")

    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"continue\"]"))
    continueButton = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"continue\"]")
    continueButton.click()
    
    self.driver.save_screenshot(f"{self.folderPath}/Description.png")

    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"finish\"]"))
    finishButton = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"finish\"]")
    finishButton.click()
        
    self.waitForElementVisible((By.CSS_SELECTOR, ".complete-header"))
    successfulMessage = self.driver.find_element(By.CSS_SELECTOR, ".complete-header")
    self.driver.save_screenshot(f"{self.folderPath}/SuccessfulMessage.png")
    assert successfulMessage.text == globalConstants.successfulMessage
    backToProductsButton = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"back-to-products\"]")
    backToProductsButton.click()
    
    self.waitForElementVisible((By.ID, "react-burger-menu-btn"))
    menuButton = self.driver.find_element(By.ID, "react-burger-menu-btn")
    menuButton.click()
    
    self.waitForElementVisible((By.ID, "logout_sidebar_link"))
    logOutButton = self.driver.find_element(By.ID, "logout_sidebar_link")
    logOutButton.click()
  
